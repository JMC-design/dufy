;;; This is a script file which generates fundamental data and saves them as a .lisp file.

(eval-when (:compile-toplevel :load-toplevel :execute)
  (asdf:load-system :alexandria))


(defparameter base-dir-path (make-pathname :directory (pathname-directory *load-pathname*)))
(defparameter src-dir-path (asdf:component-pathname (asdf:find-component (asdf:find-system :dufy-core) :core)))
;; (defparameter dat-dir-path (merge-pathnames (make-pathname :directory `(:relative ,dat-dir-name))
(defparameter dat-dir-path (asdf:component-pathname (asdf:find-component (asdf:find-system :dufy) :dat)))
(defparameter obj-name "cmf-data.lisp")
(defparameter obj-path (merge-pathnames (pathname obj-name) src-dir-path))


(defparameter cmf-arr-cie1931
  (make-array '(471 3) :element-type 'double-float :initial-element 0d0))
(defparameter cmf-arr-cie1964
  (make-array '(471 3) :element-type 'double-float :initial-element 0d0))

(defun fill-color-matching-arr (arr csv-path)
  (with-open-file (in
		   csv-path
		   :direction :input)
    (let ((*read-default-float-format* 'double-float))
      (dotimes (idx 471)
	(read in)
	(dotimes (coord 3)
	  (setf (aref arr idx coord)
		(coerce (read in) 'double-float)))))))
		
	

(fill-color-matching-arr cmf-arr-cie1931 (merge-pathnames #P"cmf-cie1931.csv" dat-dir-path))
(fill-color-matching-arr cmf-arr-cie1964 (merge-pathnames #P"cmf-cie1964.csv" dat-dir-path))


(defun array-to-list (array)
  (let* ((dimensions (array-dimensions array))
         (depth      (1- (length dimensions)))
         (indices    (make-list (1+ depth) :initial-element 0)))
    (labels ((recurse (n)
               (loop for j below (nth n dimensions)
                     do (setf (nth n indices) j)
                     collect (if (= n depth)
                                 (apply #'aref array indices)
                               (recurse (1+ n))))))
      (recurse 0))))

(defun print-make-array (var-name array &optional (stream t) (declaration t))
  (let ((typ (array-element-type array))
	(dims (array-dimensions array)))
    (when declaration
      (prin1 `(declaim (type (simple-array ,typ ,dims)
			     ,(intern (string-upcase var-name))))
	     stream)
      (terpri stream))
    (format stream "(defparameter ~a ~% #." var-name)
    (prin1 `(make-array (quote ,dims)
			:element-type (quote ,typ)
			:initial-contents (quote ,(array-to-list array)))
	   stream)
    (princ ")" stream)
    (terpri stream)))

(with-open-file (out obj-path
		     :direction :output
		     :if-exists :supersede)
  (format out ";;; This file is automatically generated by ~a.~%~%"
	  (file-namestring *load-pathname*))
  (format out "(in-package :dufy.core)~%~%")
  (print-make-array "cmf-arr-cie1931" cmf-arr-cie1931 out)
  (print-make-array "cmf-arr-cie1964" cmf-arr-cie1964 out))

(format t "The file is saved at ~A~%" obj-path)
